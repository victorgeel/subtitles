{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "provenance": [],
   "gpuType": "T4",
   "include_colab_link": true
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Subtitle Generator using OpenAI Whisper\n",
    "\n",
    "‡∂∏‡∑ô‡∂∏ Notebook ·Äû·Ää·Ä∫ video ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ audio file ·Äô·Äª·Ä¨·Ä∏·Äô·Äæ ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏ (.srt) ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Ä°·Äú·Ä≠·ÄØ·Ä°·Äú·Äª·Ä±·Ä¨·ÄÄ·Ä∫ ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·Äï·Ä±·Ä∏·Äï·Ä´·Äû·Ää·Ä∫·Åã \n",
    "\n",
    "**·Ä°·Äõ·Ä±·Ä∏·ÄÄ·Äº·ÄÆ·Ä∏:** ·Äú·ÄØ·Äï·Ä∫·ÄÑ·Äî·Ä∫·Ä∏·Äô·ÄÖ·Äê·ÄÑ·Ä∫·Äô·ÄÆ Google Colab ·Åè Runtime ·ÄÄ·Ä≠·ÄØ GPU ·Äû·Ä≠·ÄØ·Ä∑·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Äî·Ä∫ ·Äô·Äô·Ä±·Ä∑·Äï·Ä´·Äî·Äæ·ÄÑ·Ä∑·Ä∫·Åã\n",
    "*(Menu -> Runtime -> Change runtime type -> Hardware accelerator -> GPU -> Save)*"
   ],
   "metadata": {
    "id": "intro_markdown"
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab_type": "code",
    "id": "install_libraries"
   },
   "outputs": [],
   "source": [
    "#@title 1. Install Libraries\n",
    "#@markdown Google Colab ·Äõ·Ä≤·Ä∑ Runtime ·ÄÄ·Ä≠·ÄØ GPU ·Äû·Ä≠·ÄØ·Ä∑·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äï·Ä´·Åã\n",
    "#@markdown (Runtime -> Change runtime type -> Hardware accelerator -> GPU)\n",
    "\n",
    "# GPU ·ÄÅ·Äª·Ä≠·Äê·Ä∫·ÄÜ·ÄÄ·Ä∫·Äë·Ä¨·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏·Äõ·Äæ·Ä≠·Äô·Äõ·Äæ·Ä≠ ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "!nvidia-smi\n",
    "\n",
    "# Video/Audio file ·Äê·ÄΩ·Ä±·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äô·Äõ·Äæ·Ä≠·Äô·Äñ·Äº·ÄÖ·Ä∫·Äú·Ä≠·ÄØ·Ä°·Äï·Ä∫·Äê·Ä≤·Ä∑ ffmpeg ·ÄÄ·Ä≠·ÄØ install ·Äú·ÄØ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "!apt update && apt install -y ffmpeg\n",
    "\n",
    "# OpenAI Whisper library ·Åè ·Äî·Ä±·Ä¨·ÄÄ·Ä∫·ÄÜ·ÄØ·Ä∂·Ä∏ version ·ÄÄ·Ä≠·ÄØ install ·Äú·ÄØ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "!pip install -U openai-whisper"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 2. Mount Google Drive"
   ],
   "metadata": {
    "id": "mount_drive_markdown"
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab_type": "code",
    "id": "mount_google_drive",
    "cellView": "form"
   },
   "outputs": [],
   "source": [
    "#@title Mount Google Drive\n",
    "#@markdown Google Drive ·ÄÄ·Ä≠·ÄØ·ÄÅ·Äª·Ä≠·Äê·Ä∫·ÄÜ·ÄÄ·Ä∫·Äï·Äº·ÄÆ·Ä∏ ·Ä°·Äû·ÄØ·Ä∂·Ä∏·Äï·Äº·ÄØ·ÄÅ·ÄΩ·ÄÑ·Ä∑·Ä∫ (permission) ·Äï·Ä±·Ä∏·Äï·Ä´·Åã\n",
    "\n",
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 3. Transcribe and Generate Subtitles"
   ],
   "metadata": {
    "id": "transcribe_markdown"
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab_type": "code",
    "id": "transcribe_and_generate",
    "cellView": "form"
   },
   "outputs": [],
   "source": [
    "#@title Transcribe and Generate Subtitles\n",
    "\n",
    "import os\n",
    "import whisper\n",
    "from datetime import timedelta\n",
    "import subprocess\n",
    "\n",
    "#@markdown ### üìÅ Input and Output Settings\n",
    "#@markdown **Path_of_Video_or_Audio:** Drive ·Äë·Ä≤·ÄÄ video/audio file ·Äï·Ä±·Ä´·Ä∫ right-click ·Äî·Äæ·Ä≠·Äï·Ä∫·Äï·Äº·ÄÆ·Ä∏ \"Copy path\" ·ÄÄ·Ä≠·ÄØ·Äõ·ÄΩ·Ä±·Ä∏·ÄÄ·Ä¨ ·Äí·ÄÆ·Äî·Ä±·Äõ·Ä¨·Äô·Äæ·Ä¨ paste ·ÄÅ·Äª·Äï·Ä´·Åã\n",
    "Path_of_Video_or_Audio = \"/content/drive/MyDrive/video.mp4\" #@param {type:\"string\"}\n",
    "#@markdown **Output_Directory:** ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·Äô·Äª·Ä¨·Ä∏·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äô·Ää·Ä∑·Ä∫ Folder ·Ä°·Äô·Ää·Ä∫·Åã Colab ·Äõ·Ä≤·Ä∑ ·Äú·ÄÄ·Ä∫·Äõ·Äæ·Ä≠ directory ·Äô·Äæ·Ä¨ ·Ä°·Äú·Ä≠·ÄØ·Ä°·Äú·Äª·Ä±·Ä¨·ÄÄ·Ä∫ ·Äê·Ää·Ä∫·ÄÜ·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä´·Äô·Ää·Ä∫·Åã\n",
    "Output_Directory = \"results\" #@param {type:\"string\"}\n",
    "\n",
    "#@markdown ---\n",
    "#@markdown ### ‚öôÔ∏è Transcription Settings\n",
    "#@markdown **Model_Size:** Model ·Ä°·Äõ·ÄΩ·Äö·Ä∫·Ä°·ÄÖ·Ä¨·Ä∏·ÄÄ·Äº·ÄÆ·Ä∏·Äú·Ä± ·Äï·Ä≠·ÄØ·Äê·Ä≠·ÄÄ·Äª·Äú·Ä±·Åä ·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äï·Ä≠·ÄØ·ÄÄ·Äº·Ä¨·Äú·Ä± ·Äñ·Äº·ÄÖ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫·Åã (e.g., 'small', 'medium', 'large-v2')\n",
    "Model_Size = \"small\" #@param ['tiny', 'base', 'small', 'medium', 'large-v1', 'large-v2']\n",
    "#@markdown **Language:** Video/Audio ·Äõ·Ä≤·Ä∑ ·Äô·Ä∞·Äõ·ÄÑ·Ä∫·Ä∏·Äò·Ä¨·Äû·Ä¨·ÄÖ·ÄÄ·Ä¨·Ä∏ code ·ÄÄ·Ä≠·ÄØ·Äë·Ää·Ä∑·Ä∫·Äï·Ä´·Åã (e.g., `en` for English, `ja` for Japanese, `my` for Burmese)·Åã `None` ·Äë·Ä¨·Ä∏·Äï·Ä´·ÄÄ ·Ä°·Äú·Ä≠·ÄØ·Ä°·Äú·Äª·Ä±·Ä¨·ÄÄ·Ä∫·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·Äï·Ä´·Äô·Ää·Ä∫·Åã\n",
    "Language = \"ja\" #@param {type:\"string\"}\n",
    "#@markdown **Task:** `transcribe` (·Äô·Ä∞·Äõ·ÄÑ·Ä∫·Ä∏·Äò·Ä¨·Äû·Ä¨·Äñ·Äº·ÄÑ·Ä∑·Ä∫·ÄÖ·Ä¨‡∏≠‡∏î), `translate` (·Ä°·ÄÑ·Ä∫·Äπ·ÄÇ·Äú·Ä≠·Äï·Ä∫·Äò·Ä¨·Äû·Ä¨·Äû·Ä≠·ÄØ·Ä∑·Äï·Äº·Äî·Ä∫·ÄÜ·Ä≠·ÄØ)\n",
    "Task = \"translate\" #@param [\"transcribe\", \"translate\"]\n",
    "#@markdown **Subtitle_Action:**\n",
    "#@markdown - `None`: .srt ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·Äû·Ä¨ ·Äë·ÄØ·Äê·Ä∫·Äï·Ä±·Ä∏·Äô·Ää·Ä∫·Åã\n",
    "#@markdown - `burn`: ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·ÄÄ·Ä≠·ÄØ video ·Äï·Ä±·Ä´·Ä∫·Äê·ÄΩ·ÄÑ·Ä∫ ·Ä°·Äû·Ä±·ÄÄ·Äï·Ä∫·Äï·Äº·ÄÆ·Ä∏ video file ·Ä°·Äû·ÄÖ·Ä∫·Äë·ÄØ·Äê·Ä∫·Äï·Ä±·Ä∏·Äô·Ää·Ä∫ (Hardsub)·Åã\n",
    "#@markdown - `add`: ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·ÄÄ·Ä≠·ÄØ video file ·Äë·Ä≤·Äû·Ä≠·ÄØ·Ä∑ track ·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ·Ä°·Äî·Ä±·Äî·Ä≤·Ä∑ ·Äë·Ää·Ä∑·Ä∫·Äï·Ä±·Ä∏·Äô·Ää·Ä∫ (Softsub)·Åã\n",
    "Subtitle_Action = \"None\" #@param [\"None\", \"add\", \"burn\"]\n",
    "\n",
    "# --- Main Logic ---\n",
    "\n",
    "# 1. Output directory ·ÄÄ·Ä≠·ÄØ ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "if not os.path.exists(Output_Directory):\n",
    "    os.makedirs(Output_Directory)\n",
    "\n",
    "# 2. Whisper model ·ÄÄ·Ä≠·ÄØ ·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫·Äë·Ä¨·Ä∏·Äû·Ä±·Ä¨·Ä°·Äõ·ÄΩ·Äö·Ä∫·Ä°·ÄÖ·Ä¨·Ä∏·Äñ·Äº·ÄÑ·Ä∑·Ä∫ load ·Äú·ÄØ·Äï·Ä∫·Äï·Ä´\n",
    "print(f\"Loading Whisper model: '{Model_Size}'...\")\n",
    "model = whisper.load_model(Model_Size)\n",
    "print(\"Model loaded successfully.\")\n",
    "\n",
    "# 3. Transcription ·Äï·Äº·ÄØ·Äú·ÄØ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "print(f\"Starting {Task} for: {Path_of_Video_or_Audio}\")\n",
    "result = model.transcribe(\n",
    "    Path_of_Video_or_Audio,\n",
    "    language=(Language if Language else None),\n",
    "    task=Task,\n",
    "    fp16=False # If you have a problem, change to False\n",
    ")\n",
    "print(\"Transcription completed.\")\n",
    "\n",
    "# 4. SRT file format ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äï·Äº·ÄÆ·Ä∏ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "def format_timestamp(seconds):\n",
    "    \"\"\"Seconds ·ÄÄ·Ä≠·ÄØ SRT timestamp format (HH:MM:SS,ms) ·Äû·Ä≠·ÄØ·Ä∑·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äï·Ä±·Ä∏·Äû·Ää·Ä∫·Åã\"\"\"\n",
    "    delta = timedelta(seconds=seconds)\n",
    "    hours, remainder = divmod(delta.seconds, 3600)\n",
    "    minutes, seconds = divmod(remainder, 60)\n",
    "    milliseconds = delta.microseconds // 1000\n",
    "    return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"\n",
    "\n",
    "base_filename = os.path.splitext(os.path.basename(Path_of_Video_or_Audio))[0]\n",
    "srt_filename = os.path.join(Output_Directory, f\"{base_filename}.srt\")\n",
    "\n",
    "with open(srt_filename, \"w\", encoding=\"utf-8\") as srt_file:\n",
    "    for i, segment in enumerate(result[\"segments\"]):\n",
    "        start_time = format_timestamp(segment['start'])\n",
    "        end_time = format_timestamp(segment['end'])\n",
    "        text = segment['text'].strip()\n",
    "        srt_file.write(f\"{i + 1}\\n\")\n",
    "        srt_file.write(f\"{start_time} --> {end_time}\\n\")\n",
    "        srt_file.write(f\"{text}\\n\\n\")\n",
    "\n",
    "print(f\"SRT file saved to: {srt_filename}\")\n",
    "\n",
    "# 5. Subtitle Action (burn or add)\n",
    "if Subtitle_Action != \"None\":\n",
    "    output_video_path = os.path.join(Output_Directory, f\"{base_filename}_{Subtitle_Action}.mp4\")\n",
    "    print(f\"Performing '{Subtitle_Action}' action... Output will be saved to {output_video_path}\")\n",
    "\n",
    "    if Subtitle_Action == \"burn\":\n",
    "        # Hardsub: ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·ÄÄ·Ä≠·ÄØ video ·Äï·Ä±·Ä´·Ä∫·Äô·Äæ·Ä¨ ·Ä°·Äû·Ä±·ÄÄ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "        command = [\n",
    "            'ffmpeg', '-y', '-i', Path_of_Video_or_Audio, '-vf',\n",
    "            f\"subtitles='{srt_filename}'\", '-c:a', 'copy',\n",
    "            output_video_path\n",
    "        ]\n",
    "    elif Subtitle_Action == \"add\":\n",
    "        # Softsub: ·ÄÖ·Ä¨·Äê·Äî·Ä∫·Ä∏·Äë·Ä≠·ÄØ·Ä∏·ÄÄ·Ä≠·ÄØ track ·Ä°·Äî·Ä±·Äî·Ä≤·Ä∑ ·Äë·Ää·Ä∑·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏\n",
    "        command = [\n",
    "            'ffmpeg', '-y', '-i', Path_of_Video_or_Audio, '-i', srt_filename,\n",
    "            '-c', 'copy', '-c:s', 'mov_text',\n",
    "            '-metadata:s:s:0', 'language=eng', # Subtitle language code\n",
    "            output_video_path\n",
    "        ]\n",
    "\n",
    "    # Run the ffmpeg command\n",
    "    try:\n",
    "        process = subprocess.run(command, check=True, capture_output=True, text=True)\n",
    "        print(f\"Successfully created subtitled video: {output_video_path}\")\n",
    "    except subprocess.CalledProcessError as e:\n",
    "        print(\"Error during ffmpeg processing:\")\n",
    "        print(e.stderr)\n"
   ]
  }
 ]
}
